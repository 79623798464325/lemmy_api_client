linter:
  rules:
    - prefer_expression_function_bodies
    - prefer_single_quotes
    - avoid_bool_literals_in_conditional_expressions
    - exhaustive_cases
    - prefer_for_elements_to_map_fromIterable
    - prefer_if_null_operators
    - prefer_is_not_operator
    - use_is_even_rather_than_modulo
    - unnecessary_string_escapes
    - use_full_hex_values_for_flutter_colors
    - sort_unnamed_constructors_first
    - sort_child_properties_last
    - use_raw_strings
    - unnecessary_string_interpolations
    - void_checks
    - unnecessary_null_in_if_null_operators
    - unnecessary_raw_strings
    - unnecessary_null_aware_assignments
    - unnecessary_parenthesis
    - prefer_if_elements_to_conditional_expressions
    - unawaited_futures
    - prefer_typing_uninitialized_variables
    - sized_box_for_whitespace
    - recursive_getters
    - prefer_int_literals
    - prefer_spread_collections
    - prefer_null_aware_operators
    - prefer_final_in_for_each
    - prefer_contains
    - prefer_constructors_over_static_methods
    - prefer_conditional_assignment
    - prefer_asserts_in_initializer_lists
    - parameter_assignments
    - avoid_unused_constructor_parameters
    - empty_catches
    - cascade_invocations
    - await_only_futures
    - avoid_void_async
    - avoid_unnecessary_containers
    - avoid_single_cascade_in_expression_statements
    - avoid_returning_null_for_void
    - avoid_redundant_argument_values
    - avoid_escaping_inner_quotes
    - always_declare_return_types
    - prefer_const_constructors
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    - prefer_const_constructors_in_immutables
    - prefer_final_locals
    - cast_nullable_to_non_nullable
    - tighten_type_of_initializing_formals
    - unnecessary_null_checks
    - avoid_type_to_string
    - null_check_on_nullable_type_parameter

    # STYLE
    - camel_case_types
    - camel_case_extensions
    - library_names
    - file_names
    - library_prefixes
    - non_constant_identifier_names
    - constant_identifier_names # prefer
    - lines_longer_than_80_chars # avoid
    - curly_braces_in_flow_control_structures

    # DOCUMENTATION
    - slash_for_doc_comments
    - package_api_docs # prefer

    # USAGE
    - implementation_imports
    - avoid_relative_lib_imports
    - prefer_relative_imports
    - prefer_adjacent_string_concatenation
    - prefer_interpolation_to_compose_strings # prefer
    - unnecessary_brace_in_string_interps # avoid
    - prefer_collection_literals
    - prefer_is_empty
    - prefer_is_not_empty
    - avoid_function_literals_in_foreach_calls # avoid
    - prefer_iterable_whereType
    - prefer_function_declarations_over_variables
    - unnecessary_lambdas
    - prefer_equal_for_default_values
    - avoid_init_to_null
    - unnecessary_getters_setters
    - unnecessary_this
    - prefer_initializing_formals
    - type_init_formals
    - empty_constructor_bodies
    - unnecessary_new
    - unnecessary_const
    - avoid_catches_without_on_clauses # avoid
    - avoid_catching_errors
    - use_rethrow_when_possible

    # DESIGN
    - use_to_and_as_if_applicable # prefer
    - one_member_abstracts # avoid
    - avoid_classes_with_only_static_members # avoid
    - prefer_mixin
    - prefer_final_fields # prefer
    - use_setters_to_change_properties
    - avoid_setters_without_getters
    - avoid_returning_null # avoid
    - avoid_returning_this # avoid
    - type_annotate_public_apis # prefer
    - omit_local_variable_types # avoid
    - avoid_types_on_closure_parameters # avoid
    - avoid_return_types_on_setters
    - prefer_generic_function_type_aliases
    - avoid_private_typedef_functions # prefer
    - avoid_positional_boolean_parameters # avoid
    - hash_and_equals
    - avoid_equals_and_hash_code_on_mutable_classes # avoid
    - avoid_null_checks_in_equality_operators

analyzer:
  exclude:
    - "**/*.g.dart"
    - "**/*.freezed.dart"
